{"pageProps":{"postData":{"id":"voidoperator","contentHtml":"<h3>The void operator</h3>\n<p>Did you know that JavaScript has a void operator just to explicitly return undefined. Its a unary operator, meaning only one\noperand can be used with it. You can use it like shown below - standalone or with a parenthesis.</p>\n<pre><code>void expression\nvoid expression\n</code></pre>\n<pre><code>void 0 //returns undefined\nvoid 1 //returns undefined\n\nvoid 'hello' //undefined\nvoid {} //undefined\nvoid [] //undefined\n\nvoid myFunction()\nvoid myFunction()\n</code></pre>\n<h4>But why?</h4>\n<p>Why the hell do you need a special keyword just to return undefined instead of just returning undefined?\nWell, the reason is before ES5 you could actually assign a new value to the original undefined like so\nundefined = \"js snippet\", and most browsers would support it.\nSo as to return the original undefined and just to be double sure the void operator was used.</p>\n<p>Some examples,</p>\n<pre><code>//just a normal function\nfunction test() {\n\tconsole.log('hello')\n\treturn 2\n}\n//lets call it\ntest() //output is hello followed by 2\n\n//now lets try with void\nvoid test() //output is hello followed by undefined\n</code></pre>\n<p>So in the example above, void cancels the return from the function and explicitly returns undefined. But the log is anyways printed.</p>\n<p>Give it a try, would you!!</p>\n","title":"The void operator","date":"2022-01-15"}},"__N_SSG":true}