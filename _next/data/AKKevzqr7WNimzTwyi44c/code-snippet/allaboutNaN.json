{"pageProps":{"postData":{"id":"allaboutNaN","contentHtml":"<h3>All about NaN (Not a Number)</h3>\n<p>NaN stands for Not a Number. Its a special value in JavaScript that depicts a non number. But when do you encounter one?</p>\n<p>Well, whenever you are doing an arithmatic operation in JavaScript and you are passing a non number by mistake or intentionally you will get a NaN as output.</p>\n<pre><code>12*\"a\"         => NaN\n12/\"abc\"       => NaN\n(12 + 3) / {}  => NaN\n12 - \"a\"       => NaN\n12 + \"a\"       => \"12a\"\n</code></pre>\n<p>In the examples above the arithmatic operations are expecting numbers but you passed a string or anything non numerical. Rather than throwing a runtime error, JavaScript gives a NaN. However, the plus symbol which is also used for concatenation actually joins the two and gives a combined string. Thats an exception :)</p>\n<p>But do remember, number like strings are converted to number behind the scenes. So you dont get a NaN here. For eg.</p>\n<pre><code>12 * \"5\" => 60\n12/\"6\"   => 2\n12 - \"5\" => 7\n</code></pre>\n<h4>Things to note</h4>\n<ul>\n<li>NaN === NaN //false</li>\n<li>typeof NaN === 'number'</li>\n<li>NaN is false by default. (!!NaN => false)</li>\n</ul>\n<p>How to find?\nUse the isNaN() global function to look for NaN values. Examples below,</p>\n<pre><code>isNaN(12 * 'a') //true\n\nisNaN(12 * '5') //false (converted to number behind the scenes)\n\nisNaN(12) //false (because it is not a NaN, its a proper number)\n\nisNaN(NaN) //true\n\nisNaN('a') //true\n\nisNaN('12') //false (converted to number behind the scenes)\n</code></pre>\n<p>I hope now you have enough ammunitions to give it a try!!</p>\n","title":"All about NaN (Not a Number)","date":"2022-01-15"}},"__N_SSG":true}